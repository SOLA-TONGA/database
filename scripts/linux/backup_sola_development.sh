#!/bin/bash
#                SOLA Development Backup Script (Linux)
#
# Author: Andrew McDowell 
# Date: 04 Mar 2014
# 
# This script uses the PostgreSQL pg_dump utility to create plain 
# backups of the main SOLA database tables to support future
# development activities. The 7z archive generated by this process
# can be copied over the data 7z file used by the SOLA database
# build process allowing production data to be loaded into a 
# development database. To ensure the security of the backup file, 
# a password must be provided for the 7z archive. 
# 
# The file produced by this script can be copied into a Dropbox
# folder allowing remote developers access to production data. 
#
# The script will prompt the user (interactive mode) if the -p
# option is provided as parameters. The command options 
# recognized are 
#   -f: Frequency of dump (01-Base, 02-Hourly, 03-Daily,  
#       04-Development or 05-Train)
#   -p: Runs the script in interactive mode
#   -a: The password for the 7z archive
#   -d: Name of the database to dump
#  
# Examples:
# 1) To produce a development backup 
#    > ./backup_sola_development.sh  -a <Archive password>
# 2) To run the script in interactive mode
#    > ./backup_sola_development.sh -p
#
#
# DATABASE PASSWORD
# PGPASSWORD and PGPASSFILE are no longer accepted by
# postgresql so the only way to authenticate with the 
# database is to use a .pgpass file. The .pgpass file
# must be located in the Home directory of the user running
# the script. The script will notify the user and stop if 
# the .pgpass file does not exist.
#
# The format for each line in the .pgpass file is  
#        host:port:database:username:password
# * can be used as a wildcard.  e.g.
#       locahost:5432:*:postgres:<DB Password>
# The .pgpass file must have rw permissions for the user ONLY!
# e.g. chmod 0600 .pgpass 

# Configure variables to use for script:

# The current directory where this command has been executed from
# current_dir=$(pwd) 
current_dir="/opt/sola/backup/scripts"
# Root directory for the database backups 
backup_root_dir="$current_dir/../"
# Default install location for pg_dump on linux/Debian. This location
# may need to be modified if a different version of postgresql
# is being used and/or it is installed in a custom location.
pg_dump="/usr/lib/postgresql/9.3/bin/pg_dump"
# Default install location for p7zip on linux/Debian. This location
# may need to be modified if a custom install location is used
# and/or a different archiver (e.g. Keka on MacOS) is used to unzip 
# the data files.  Note that p7zip is also available for MacOS.
zip_exe="/usr/bin/7z"
# Dropbox folder 
dropbox="/home/solaadmin/Dropbox/SOLA Tonga Deploy Files/Database"

# Default DB connection values
host=localhost
port=5432
dbname=sola_prod
username=postgres

prompt=N
archive_password=?
frequency=04-Development

# Capture options from the command line
OPTIND=1 # Reset for getopts in case it was used previously.
while getopts "hf:d:a:" opt; do
  case $opt in
    f) frequency=$OPTARG
       ;;
    h) echo "Valid options: -t <type> -f <frequency> -d <database name>" 
       exit 0
       ;;
    a) archive_password=$OPTARG
       ;;
    d) dbname=$OPTARG
       ;;
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND-1)) # Shift off the options and optional --.

# Check if password has been set. If not, assume the script is
# being run interactively and prompt for details
if [ $archive_password == "?" ]; then
   read -p "Archive Password [?] : " archive_password
fi

# Obtain a formatted date to use in the file names
datestr=$(date +"%Y%m%d_%H%M")

data_path="$backup_root_dir$frequency"
BACKUP_LOG="$backup_root_dir$frequency/sola-dev-$datestr.log" 
PGPASS="$HOME/.pgpass"

# Start the backup
echo
echo 
echo "Starting Backup at $(date)"
echo "Starting Backup at $(date)" > $BACKUP_LOG 2>&1

# Determine if the .pgpass file exists.
if [ ! -f  $PGPASS]; then
   echo "$PGPASS does not exist! - Exiting"
   echo "$PGPASS does not exist! - Exiting" >> $BACKUP_LOG 2>&1
   exit 1
fi

# Dump data from each schema into a plain text SQL file
echo "Dumping address tables..."
echo "### Dumping address tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b -F p \
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t address.address \
	-f "$data_path/01_address.sql" >> $BACKUP_LOG 2>&1

echo "Dumping party tables..."
echo "### Dumping party tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b -F p \
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t party.party  -t party.party_role \
	-f "$data_path/02_party.sql" >> $BACKUP_LOG 2>&1

echo "Dumping transaction tables..."
echo "### Dumping transaction tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b \
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t transaction.transaction -t transaction.transaction_source \
	-f "$data_path/04_transaction.sql" >> $BACKUP_LOG 2>&1
	
echo "Dumping source tables..."
echo "### Dumping source tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b \
    --column-inserts --disable-dollar-quoting --disable-triggers \
	-t source.archive -t source.source -t application.application_uses_source \
	-t administrative.source_describes_rrr -t source.power_of_attorney \
    -t administrative.source_describes_ba_unit -t source.spatial_source \
    -t source.spatial_source_measurement \
    -f "$data_path/05_source.sql" >> $BACKUP_LOG 2>&1
	
echo "Dumping cadastre tables..."
echo "### Dumping cadastre tables..." >> $BACKUP_LOG 2>&1
$pg_dump -h $host -p $port -U $username -d $dbname -a -b -F p\
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t cadastre.cadastre_object -t cadastre.spatial_unit \
	-t cadastre.spatial_value_area -t cadastre.spatial_unit_group \
	-t cadastre.spatial_unit_in_group -t cadastre.cadastre_object_node_target \
    -t cadastre.cadastre_object_target -t cadastre.spatial_unit_address \
    -t cadastre.survey_point \
	-f "$data_path/06_cadastre.sql" >> $BACKUP_LOG 2>&1
	
echo "Dumping administrative tables..."
echo "### Dumping administrative tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b \
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t administrative.ba_unit -t administrative.required_relationship_baunit \
    -t administrative.ba_unit_area -t administrative.rrr -t administrative.rrr_share \
    -t administrative.party_for_rrr -t administrative.notation \
    -t administrative.ba_unit_contains_spatial_unit -t administrative.ba_unit_as_party \
    -t administrative.ba_unit_target -t administrative.condition_for_rrr \
    -t administrative.mortgage_isbased_in_rrr \
	-f "$data_path/07_administrative.sql" >> $BACKUP_LOG 2>&1
	
echo "Dumping application tables..."
echo "### Dumping application tables..." >> $BACKUP_LOG 2>&1
$pg_dump -h $host -p $port -U $username -d $dbname -a -b \
    --column-inserts --disable-dollar-quoting --disable-triggers \
	-t application.application -t application.application_property \
	-t application.service -t application.application_spatial_unit \
	-t application.service_checklist_item -t application.application_historic \
	-t application.service_historic \
    -f "$data_path/08_application.sql" >> $BACKUP_LOG 2>&1	
	
echo "Dumping bulk operation tables..."
echo "### Dumping bulk operation tables..." >> $BACKUP_LOG 2>&1 
$pg_dump -h $host -p $port -U $username -d $dbname -a -b \
    --column-inserts --disable-dollar-quoting --disable-triggers \
    -t bulk_operation.spatial_unit_temporary \
	-f "$data_path/09_bulk_operation.sql" >> $BACKUP_LOG 2>&1
	
# Compress the test/demo data using 7z. 
echo "Compressing data files..."
echo "### Compressing data files..." >> $BACKUP_LOG 2>&1
# Use -p option if the archive needs to be password protected as follows
$zip_exe a -y -p$archive_password "$data_path/tonga.7z" "$data_path/*.sql" >> $BACKUP_LOG 2>&1

echo  "Moving file to Dropbox..."
echo "### Moving file to Dropbox..." >> $BACKUP_LOG 2>&1
rm -f "$dropbox/tonga.7z"
cp "$data_path/tonga.7z" "$dropbox/tonga.7z"

# Report the finish time
echo "Finished at $(date)"
echo "Finished at $(date)" >> $BACKUP_LOG 2>&1
